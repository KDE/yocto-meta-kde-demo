#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# SPDX-FileCopyrightText: 2013 Freescale Semiconductor, Inc.
# SPDX-FileCopyrightText: 2012, 2013 O.S. Systems Software LTDA.
# SPDX-FileContributor: Otavio Salvador <otavio@ossystems.com.br>
# SPDX-FileCopyrightText: 2017 Volker Krause <vkrause@kde.org>
# SPDX-FileCopyrightText: 2022-2023 Andreas Cord-Landwehr <cordlandwehr@kde.org>
#
# SPDX-License-Identifier: GPL-2.0-only

CWD=$(pwd)

# identify directory with meta-layers, support both top layer location and nested sources/ structure
SOURCESDIR=${CWD}
if [ -e "${CWD}/sources" ]; then
    SOURCESDIR=${CWD}/sources
fi

THIS_SCRIPT="setup-environment"
if [ "$(basename -- $0)" = "${THIS_SCRIPT}" ]; then
    echo "Error: This script needs to be sourced. Please run as '. $0'"
    return 1
fi

LIST_MACHINES=$(ls -1 ${SOURCESDIR}/*/conf/machine)

usage()
{
    echo -e "\nUsage: . ${THIS_SCRIPT} <build-dir>
    <build-dir>: specifies the build directory location (required)

If undefined, this script will set \$MACHINE to 'raspberrypi'.

Supported machines: $(echo; \
    echo ${LIST_MACHINES} \
    | sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%")

To build for a machine listed above, run this script as:
MACHINE=<machine> . ${THIS_SCRIPT} <build-dir>
"
}

clean_up()
{
    unset BUILDDIRECTORY CWD SOURCES TEMPLATES LIST_MACHINES VALID_MACHINE
    unset MACHINE SDKMACHINE DISTRO OEROOT
    unset generated_config updated
}

FORCE_RECONFIGURE=false

# get command line options
while test -n "${1}";
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        -f)
            echo "Force generation of local.conf and bblayers.conf"
           FORCE_RECONFIGURE=true
           ;;
        *)
           BUILDDIRECTORY=$1
           ;;
    esac
    shift
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ -z "$MACHINE" ]; then
    echo "WARNING: no MACHINE variable set, defaulting to MACHINE=raspberrypi4"
    MACHINE='raspberrypi4'
fi

BUILDDIRECTORY=${BUILDDIRECTORY:-build-${MACHINE}}

# Check the machine type specified
VALID_MACHINE=$(echo -e "${LIST_MACHINES}" | grep ${MACHINE}.conf$ | wc -l)
if [ "x$MACHINE" = "x" ] || [ "$VALID_MACHINE" = "0" ]; then
    echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e ${BUILDDIRECTORY}/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='x86_64'
fi

if [ -z "$DISTRO" ]; then
    DISTRO='kde-linux'
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ ! -d "${CWD}/${BUILDDIRECTORY}/conf" ] || [ ${FORCE_RECONFIGURE} = true ]; then
    echo "Prepare initial build configuration directory: ${BUILDDIRECTORY}/conf"

    # generate bblayers for specific hardware variant
    case ${MACHINE} in
        raspberrypi*)
            LAYERSCONF="bblayers.conf.rpi.sample"
            ;;
        visionfive2*)
            LAYERSCONF="bblayers.conf.riscv.sample"
            ;;
        beaglev-ahead*)
            LAYERSCONF="bblayers.conf.riscv.sample"
            ;;
        qcom*)
            LAYERSCONF="bblayers.conf.qcom.sample"
            ;;
        *)
            LAYERSCONF="bblayers.conf.sample"
            ;;
    esac

    # Generate the local.conf based on the Yocto defaults
    TEMPLATESDIR=${SOURCESDIR}/meta-kde-demo/templates

    LAYERSCONF=${TEMPLATESDIR}/${LAYERSCONF}
    if [ ! -e ${LAYERSCONF} ]; then
        echo "ERROR: Layer configuration file missing: '${LAYERSCONF}'"
        return 1
    fi
    mkdir -p ${CWD}/${BUILDDIRECTORY}/conf
    cp ${LAYERSCONF} ${CWD}/${BUILDDIRECTORY}/conf/bblayers.conf

    # Generate local.conf from poky example
    if [ -f ${SOURCESDIR}/poky/meta-poky/conf/local.conf.sample ]; then
        cp ${SOURCESDIR}/poky/meta-poky/conf/local.conf.sample ${CWD}/${BUILDDIRECTORY}/conf/local.conf.sample
    fi
    if [ -f ${SOURCESDIR}/poky/meta-poky/conf/templates/default/local.conf.sample ]; then
        cp ${SOURCESDIR}/poky/meta-poky/conf/templates/default/local.conf.sample ${CWD}/${BUILDDIRECTORY}/conf/local.conf.sample
    fi

    # Setup site configuration
    cp ${TEMPLATESDIR}/site.conf ${CWD}/${BUILDDIRECTORY}/conf/

    grep -v '^#\|^$' ${CWD}/${BUILDDIRECTORY}/conf/local.conf.sample > ${CWD}/${BUILDDIRECTORY}/conf/local.conf
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i ${CWD}/${BUILDDIRECTORY}/conf/local.conf

    # allow building of ffmpeg
    echo "LICENSE_FLAGS_ACCEPTED=\"commercial\"" >> ${CWD}/${BUILDDIRECTORY}/conf/local.conf

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

cat <<EOF

Welcome to KDE Demo BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

You can now run 'bitbake <target>'

Common targets are:
    kde-demo-image

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured at ${BUILDDIRECTORY} with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
EOF
else
    echo "Your configuration files at ${BUILDDIRECTORY} have not been touched."
fi

OEROOT=$(readlink -f ${SOURCESDIR}/poky)
cd ${OEROOT}
. ${OEROOT}/oe-init-build-env ${CWD}/${BUILDDIRECTORY} > /dev/null

clean_up
